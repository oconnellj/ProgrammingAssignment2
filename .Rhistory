demo()
license()
citation()
q()
license
clear
quit
exit
quit ()
setInternet2
setInternet2()
getwd()
x <- numeric()
x
print(x)
x <- numeric(
)
x
x <- x + x
x
y <- x
y
x <- numeric(1)
x
x <- numeric(2)
x
x <- numeric(5)
x
mean(numeric(25))
x <- number(3.3)
x <- numeric(3.3)
x
x <- numeric(1, 3.3)
x
makeVector <- function(x = numeric()) {
return(x)
}
makeVector(c(1,2,3))
c(1,2,3)
makeCacheMatrix <- function(x = matrix()) {
c <- NULL
set <- function(y) {
x <<- y
c <<- NULL
}
get <- function() x
setcache <- function(cache) c <<- solve
getcache <- function() c
list(set = set, get = get, setcache = setcache, getcache = getcache)
}
x <- matrix(1:4, nrow = 2)
x
makeCacheMatrix(x)
x$get
y <- makeCacheMatrix(x)
y$get
y$set
x <- matrix(1:4, nrow = 2)
y$get
x <- matrix(1:4, nrow = 2)
y <- makeCacheMatrix(x)
y
y$get
z <- y$get
z
y$get(x)
y <- makeCacheMatrix(matrix(1:4,nrow=2))
y
y(matrix(1:4,nrow=2))
y$set(matrix(1:4,nrow=2))
y$get()
y$getcache
y$setcache
y$getcache
y$getcache()
y$setcache()
y
y$get()
y$getcache()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
c <- x$getcache()
if (!is.null(c)) {
message("getting cache inverse")
return(c)
}
data <- x$get()
c <- solve(data, ...)
x$setcache(c)
c
}
cacheSolve(y)
y
y$set(matrix(1:4,nrow=2))
y
y$set(matrix(1:4,nrow=2))
cacheSolve(y)
y$getcache()
cacheSolve(y)
cacheSolve(y)
y$set(matrix(1:4,nrow=2))
cacheSolve(y)
?solve
y$get()
data <- y$get()
data
solve(data)
y$setcache(data)
y
y$get()
y$setcache(data)
cacheSolve(y)
y$getcache()
library("cacheMatrix.R")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library("cachematrix.R")
q()
q()
q()
q()
q()
q()
library("cachematrix.R")
load("cachematrix.R")
load("cachematrix.R")
ls()
load("cachematrix.R")
load("cachematrix-v2.R")
load("cachematrix.R")
quit()
load("cachematrix.R")
load("cachematrix.R")
